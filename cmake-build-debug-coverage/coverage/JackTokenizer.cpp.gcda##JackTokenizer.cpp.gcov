        -:    0:Source:C:/Users/MODX/CLionProjects/Jack-Lex/src/JackTokenizer/JackTokenizer.cpp
        -:    0:Graph:C:\Users\MODX\CLionProjects\Jack-Lex\cmake-build-debug-coverage\CMakeFiles\Jack_Lex.dir\src\JackTokenizer\JackTokenizer.cpp.gcno
        -:    0:Data:C:\Users\MODX\CLionProjects\Jack-Lex\cmake-build-debug-coverage\CMakeFiles\Jack_Lex.dir\src\JackTokenizer\JackTokenizer.cpp.gcda
        -:    0:Runs:1
        -:    1:#include "JackTokenizer.hpp"
        -:    2:
function _ZN13JackTokenizerC2ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_ called 1 returned 100% blocks executed 40%
       47:    3:JackTokenizer::JackTokenizer(std::string fName, std::string outfName) {
        1:    3-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
call    3 returned 1
call    4 returned 1
call    5 returned 1
branch  6 taken 1 (fallthrough)
branch  7 taken 0 (throw)
        1:    3-block  1
call    8 returned 1
call    9 returned 1
branch 10 taken 1 (fallthrough)
branch 11 taken 0 (throw)
        1:    3-block  2
call   12 returned 1
call   13 returned 1
branch 14 taken 1 (fallthrough)
branch 15 taken 0 (throw)
        1:    3-block  3
call   16 returned 1
call   17 returned 1
branch 18 taken 1 (fallthrough)
branch 19 taken 0 (throw)
        1:    3-block  4
call   20 returned 1
call   21 returned 1
branch 22 taken 1 (fallthrough)
branch 23 taken 0 (throw)
        1:    3-block  5
call   24 returned 1
call   25 returned 1
branch 26 taken 1 (fallthrough)
branch 27 taken 0 (throw)
        1:    3-block  6
call   28 returned 1
call   29 returned 1
branch 30 taken 1 (fallthrough)
branch 31 taken 0 (throw)
        1:    3-block  7
call   32 returned 1
call   33 returned 1
branch 34 taken 1 (fallthrough)
branch 35 taken 0 (throw)
        1:    3-block  8
call   36 returned 1
call   37 returned 1
branch 38 taken 1 (fallthrough)
branch 39 taken 0 (throw)
        1:    3-block  9
call   40 returned 1
call   41 returned 1
branch 42 taken 1 (fallthrough)
branch 43 taken 0 (throw)
        1:    3-block 10
call   44 returned 1
call   45 returned 1
branch 46 taken 1 (fallthrough)
branch 47 taken 0 (throw)
        1:    3-block 11
call   48 returned 1
call   49 returned 1
branch 50 taken 1 (fallthrough)
branch 51 taken 0 (throw)
        1:    3-block 12
call   52 returned 1
call   53 returned 1
branch 54 taken 1 (fallthrough)
branch 55 taken 0 (throw)
        1:    3-block 13
call   56 returned 1
call   57 returned 1
branch 58 taken 1 (fallthrough)
branch 59 taken 0 (throw)
        1:    3-block 14
call   60 returned 1
call   61 returned 1
branch 62 taken 1 (fallthrough)
branch 63 taken 0 (throw)
        1:    3-block 15
call   64 returned 1
call   65 returned 1
branch 66 taken 1 (fallthrough)
branch 67 taken 0 (throw)
        1:    3-block 16
call   68 returned 1
call   69 returned 1
branch 70 taken 1 (fallthrough)
branch 71 taken 0 (throw)
        1:    3-block 17
call   72 returned 1
call   73 returned 1
branch 74 taken 1 (fallthrough)
branch 75 taken 0 (throw)
        1:    3-block 18
call   76 returned 1
call   77 returned 1
branch 78 taken 1 (fallthrough)
branch 79 taken 0 (throw)
        1:    3-block 19
call   80 returned 1
call   81 returned 1
branch 82 taken 1 (fallthrough)
branch 83 taken 0 (throw)
        1:    3-block 20
call   84 returned 1
call   85 returned 1
branch 86 taken 1 (fallthrough)
branch 87 taken 0 (throw)
        1:    3-block 21
call   88 returned 1
       21:    3-block 22
branch 89 taken 20 (fallthrough)
branch 90 taken 1
       20:    3-block 23
call   91 returned 20
        1:    3-block 24
call   92 returned 1
call   93 returned 1
call   94 returned 1
call   95 returned 1
call   96 returned 1
call   97 returned 1
call   98 returned 1
call   99 returned 1
call   100 returned 1
call   101 returned 1
call   102 returned 1
call   103 returned 1
call   104 returned 1
call   105 returned 1
call   106 returned 1
call   107 returned 1
call   108 returned 1
call   109 returned 1
call   110 returned 1
call   111 returned 1
call   112 returned 1
call   113 returned 1
branch 114 taken 1 (fallthrough)
branch 115 taken 0 (throw)
        1:    3-block 25
call   116 returned 1
call   117 returned 1
branch 118 taken 1 (fallthrough)
branch 119 taken 0 (throw)
        1:    3-block 26
call   120 returned 1
call   121 returned 1
branch 122 taken 1 (fallthrough)
branch 123 taken 0 (throw)
        1:    3-block 27
call   124 returned 1
call   125 returned 1
branch 126 taken 1 (fallthrough)
branch 127 taken 0 (throw)
        1:    3-block 28
call   128 returned 1
call   129 returned 1
branch 130 taken 1 (fallthrough)
branch 131 taken 0 (throw)
        1:    3-block 29
call   132 returned 1
call   133 returned 1
branch 134 taken 1 (fallthrough)
branch 135 taken 0 (throw)
        1:    3-block 30
call   136 returned 1
call   137 returned 1
branch 138 taken 1 (fallthrough)
branch 139 taken 0 (throw)
        1:    3-block 31
call   140 returned 1
call   141 returned 1
branch 142 taken 1 (fallthrough)
branch 143 taken 0 (throw)
        1:    3-block 32
call   144 returned 1
call   145 returned 1
branch 146 taken 1 (fallthrough)
branch 147 taken 0 (throw)
        1:    3-block 33
call   148 returned 1
call   149 returned 1
branch 150 taken 1 (fallthrough)
branch 151 taken 0 (throw)
        1:    3-block 34
call   152 returned 1
call   153 returned 1
branch 154 taken 1 (fallthrough)
branch 155 taken 0 (throw)
        1:    3-block 35
call   156 returned 1
call   157 returned 1
branch 158 taken 1 (fallthrough)
branch 159 taken 0 (throw)
        1:    3-block 36
call   160 returned 1
call   161 returned 1
branch 162 taken 1 (fallthrough)
branch 163 taken 0 (throw)
        1:    3-block 37
call   164 returned 1
call   165 returned 1
branch 166 taken 1 (fallthrough)
branch 167 taken 0 (throw)
        1:    3-block 38
call   168 returned 1
call   169 returned 1
branch 170 taken 1 (fallthrough)
branch 171 taken 0 (throw)
        1:    3-block 39
call   172 returned 1
call   173 returned 1
branch 174 taken 1 (fallthrough)
branch 175 taken 0 (throw)
        1:    3-block 40
call   176 returned 1
call   177 returned 1
branch 178 taken 1 (fallthrough)
branch 179 taken 0 (throw)
        1:    3-block 41
call   180 returned 1
call   181 returned 1
branch 182 taken 1 (fallthrough)
branch 183 taken 0 (throw)
        1:    3-block 42
call   184 returned 1
call   185 returned 1
branch 186 taken 1 (fallthrough)
branch 187 taken 0 (throw)
        1:    3-block 43
call   188 returned 1
call   189 returned 1
branch 190 taken 1 (fallthrough)
branch 191 taken 0 (throw)
        1:    3-block 44
call   192 returned 1
       20:    3-block 45
branch 193 taken 19 (fallthrough)
branch 194 taken 1
       19:    3-block 46
call   195 returned 19
        1:    3-block 47
call   196 returned 1
call   197 returned 1
call   198 returned 1
call   199 returned 1
call   200 returned 1
call   201 returned 1
call   202 returned 1
call   203 returned 1
call   204 returned 1
call   205 returned 1
call   206 returned 1
call   207 returned 1
call   208 returned 1
call   209 returned 1
call   210 returned 1
call   211 returned 1
call   212 returned 1
call   213 returned 1
call   214 returned 1
call   215 returned 1
call   216 returned 1
branch 217 taken 1 (fallthrough)
branch 218 taken 0 (throw)
        1:    3-block 48
call   219 returned 1
call   220 returned 1
branch 221 taken 1 (fallthrough)
branch 222 taken 0 (throw)
        1:    3-block 49
call   223 returned 1
call   224 returned 1
branch 225 taken 1 (fallthrough)
branch 226 taken 0 (throw)
        1:    3-block 50
call   227 returned 1
call   228 returned 1
branch 229 taken 1 (fallthrough)
branch 230 taken 0 (throw)
        1:    3-block 51
call   231 returned 1
call   232 returned 1
branch 233 taken 1 (fallthrough)
branch 234 taken 0 (throw)
        1:    3-block 52
call   235 returned 1
        5:    3-block 53
branch 236 taken 4 (fallthrough)
branch 237 taken 1
        4:    3-block 54
call   238 returned 4
        1:    3-block 55
call   239 returned 1
call   240 returned 1
call   241 returned 1
call   242 returned 1
call   243 returned 1
call   244 returned 1
branch 245 taken 1 (fallthrough)
branch 246 taken 0 (throw)
        1:    3-block 56
call   247 returned 1
call   248 returned 1
branch 249 taken 1 (fallthrough)
branch 250 taken 0 (throw)
        1:    3-block 57
call   251 returned 1
call   252 returned 1
branch 253 taken 1 (fallthrough)
branch 254 taken 0 (throw)
        1:    3-block 58
call   255 returned 1
call   256 returned 1
branch 257 taken 1 (fallthrough)
branch 258 taken 0 (throw)
        1:    3-block 59
call   259 returned 1
        4:    3-block 60
branch 260 taken 3 (fallthrough)
branch 261 taken 1
        3:    3-block 61
call   262 returned 3
        1:    3-block 62
call   263 returned 1
call   264 returned 1
call   265 returned 1
    $$$$$:    3-block 63
call   266 never executed
    $$$$$:    3-block 64
    $$$$$:    3-block 65
    $$$$$:    3-block 66
branch 267 never executed
branch 268 never executed
    $$$$$:    3-block 67
call   269 never executed
    $$$$$:    3-block 68
    $$$$$:    3-block 69
call   270 never executed
    $$$$$:    3-block 70
    $$$$$:    3-block 71
call   271 never executed
    $$$$$:    3-block 72
    $$$$$:    3-block 73
call   272 never executed
    $$$$$:    3-block 74
    $$$$$:    3-block 75
call   273 never executed
    $$$$$:    3-block 76
    $$$$$:    3-block 77
call   274 never executed
    $$$$$:    3-block 78
    $$$$$:    3-block 79
call   275 never executed
    $$$$$:    3-block 80
    $$$$$:    3-block 81
call   276 never executed
    $$$$$:    3-block 82
    $$$$$:    3-block 83
call   277 never executed
    $$$$$:    3-block 84
    $$$$$:    3-block 85
call   278 never executed
    $$$$$:    3-block 86
    $$$$$:    3-block 87
call   279 never executed
    $$$$$:    3-block 88
    $$$$$:    3-block 89
call   280 never executed
    $$$$$:    3-block 90
    $$$$$:    3-block 91
call   281 never executed
    $$$$$:    3-block 92
    $$$$$:    3-block 93
call   282 never executed
    $$$$$:    3-block 94
    $$$$$:    3-block 95
call   283 never executed
    $$$$$:    3-block 96
    $$$$$:    3-block 97
call   284 never executed
    $$$$$:    3-block 98
    $$$$$:    3-block 99
call   285 never executed
    $$$$$:    3-block 100
    $$$$$:    3-block 101
call   286 never executed
    $$$$$:    3-block 102
    $$$$$:    3-block 103
call   287 never executed
    $$$$$:    3-block 104
    $$$$$:    3-block 105
call   288 never executed
    $$$$$:    3-block 106
    $$$$$:    3-block 107
call   289 never executed
    $$$$$:    3-block 108
    $$$$$:    3-block 109
call   290 never executed
    $$$$$:    3-block 110
    $$$$$:    3-block 111
    $$$$$:    3-block 112
branch 291 never executed
branch 292 never executed
    $$$$$:    3-block 113
call   293 never executed
    $$$$$:    3-block 114
    $$$$$:    3-block 115
call   294 never executed
    $$$$$:    3-block 116
    $$$$$:    3-block 117
call   295 never executed
    $$$$$:    3-block 118
    $$$$$:    3-block 119
call   296 never executed
    $$$$$:    3-block 120
    $$$$$:    3-block 121
call   297 never executed
    $$$$$:    3-block 122
    $$$$$:    3-block 123
call   298 never executed
    $$$$$:    3-block 124
    $$$$$:    3-block 125
call   299 never executed
    $$$$$:    3-block 126
    $$$$$:    3-block 127
call   300 never executed
    $$$$$:    3-block 128
    $$$$$:    3-block 129
call   301 never executed
    $$$$$:    3-block 130
    $$$$$:    3-block 131
call   302 never executed
    $$$$$:    3-block 132
    $$$$$:    3-block 133
call   303 never executed
    $$$$$:    3-block 134
    $$$$$:    3-block 135
call   304 never executed
    $$$$$:    3-block 136
    $$$$$:    3-block 137
call   305 never executed
    $$$$$:    3-block 138
    $$$$$:    3-block 139
call   306 never executed
    $$$$$:    3-block 140
    $$$$$:    3-block 141
call   307 never executed
    $$$$$:    3-block 142
    $$$$$:    3-block 143
call   308 never executed
    $$$$$:    3-block 144
    $$$$$:    3-block 145
call   309 never executed
    $$$$$:    3-block 146
    $$$$$:    3-block 147
call   310 never executed
    $$$$$:    3-block 148
    $$$$$:    3-block 149
call   311 never executed
    $$$$$:    3-block 150
    $$$$$:    3-block 151
call   312 never executed
    $$$$$:    3-block 152
    $$$$$:    3-block 153
call   313 never executed
    $$$$$:    3-block 154
    $$$$$:    3-block 155
    $$$$$:    3-block 156
branch 314 never executed
branch 315 never executed
    $$$$$:    3-block 157
call   316 never executed
    $$$$$:    3-block 158
    $$$$$:    3-block 159
call   317 never executed
    $$$$$:    3-block 160
    $$$$$:    3-block 161
call   318 never executed
    $$$$$:    3-block 162
    $$$$$:    3-block 163
call   319 never executed
    $$$$$:    3-block 164
    $$$$$:    3-block 165
call   320 never executed
    $$$$$:    3-block 166
    $$$$$:    3-block 167
call   321 never executed
    $$$$$:    3-block 168
    $$$$$:    3-block 169
    $$$$$:    3-block 170
branch 322 never executed
branch 323 never executed
    $$$$$:    3-block 171
call   324 never executed
    $$$$$:    3-block 172
    $$$$$:    3-block 173
call   325 never executed
    $$$$$:    3-block 174
    $$$$$:    3-block 175
call   326 never executed
    $$$$$:    3-block 176
    $$$$$:    3-block 177
call   327 never executed
    $$$$$:    3-block 178
        1:    4:    CODE code;
call    0 returned 1
        1:    5:    std::vector<std::string> fNames = {};
call    0 returned 1
        -:    6:
        1:    7:    if (std::filesystem::is_directory(fName.c_str())){
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:    7-block  0
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
        1:    7-block  1
call    7 returned 1
branch  8 taken 0 (fallthrough)
branch  9 taken 1
    $$$$$:    7-block  2
call   10 never executed
    $$$$$:    7-block  3
    $$$$$:    7-block  4
        -:    8:
    #####:    9:        for (const auto& entry: std::filesystem::directory_iterator(fName.c_str())){
    %%%%%:    9-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:    9-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:    9-block  2
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
    %%%%%:    9-block  3
call   12 never executed
    %%%%%:    9-block  4
call   13 never executed
branch 14 never executed
branch 15 never executed
    %%%%%:    9-block  5
call   16 never executed
branch 17 never executed
branch 18 never executed
    $$$$$:    9-block  6
call   19 never executed
    $$$$$:    9-block  7
    $$$$$:    9-block  8
    #####:   10:            if (std::filesystem::is_regular_file(entry)){
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:   10-block  0
branch  4 never executed
branch  5 never executed
    #####:   11:                auto filename = entry.path().filename().string();
    %%%%%:   11-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:   11-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    $$$$$:   11-block  2
    #####:   12:                auto full_filename = fName.append("\\" + filename);
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:   12-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:   12-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
    $$$$$:   12-block  2
    #####:   13:                if (filename.ends_with(".jack") && std::find(fNames.begin(), fNames.end(), full_filename) == fNames.end()){
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:   13-block  0
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%:   13-block  1
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%:   13-block  2
    %%%%%:   13-block  3
    %%%%%:   13-block  4
branch 12 never executed
branch 13 never executed
    $$$$$:   13-block  5
    $$$$$:   13-block  6
    #####:   14:                    fNames.push_back(full_filename);
    %%%%%:   14-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:   15:                }
    #####:   16:            }
    %%%%%:   16-block  0
call    0 never executed
call    1 never executed
    $$$$$:   16-block  1
call    2 never executed
    $$$$$:   16-block  2
call    3 never executed
    #####:   17:        }
    %%%%%:   17-block  0
call    0 never executed
call    1 never executed
call    2 never executed
    $$$$$:   17-block  1
call    3 never executed
    $$$$$:   17-block  2
call    4 never executed
    $$$$$:   17-block  3
call    5 never executed
    #####:   18:        if (std::filesystem::is_directory(outfName.substr(0, outfName.find_last_of("\\")))){
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:   18-block  0
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:   18-block  1
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%:   18-block  2
call   10 never executed
call   11 never executed
branch 12 never executed
branch 13 never executed
    $$$$$:   18-block  3
call   14 never executed
    $$$$$:   18-block  4
    $$$$$:   18-block  5
call   15 never executed
    $$$$$:   18-block  6
    #####:   19:            this->m_outfName = outfName;
    %%%%%:   19-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:   20:        }
        -:   21:        else{
    #####:   22:            this->m_outfName = fName + "\\" +  outfName;
    %%%%%:   22-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:   22-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:   22-block  2
call    6 never executed
call    7 never executed
call    8 never executed
    $$$$$:   22-block  3
call    9 never executed
    $$$$$:   22-block  4
        -:   23:        }
        -:   24:    }
        -:   25:    else{
        1:   26:        fNames.push_back(fName);
        1:   26-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   27:        this->m_outfName = outfName.append(".asm");
        1:   27-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   27-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        -:   28:    }
        2:   29:    for (const auto& file: fNames){
        1:   29-block  0
call    0 returned 1
call    1 returned 1
        1:   29-block  1
call    2 returned 1
call    3 returned 1
        2:   29-block  2
call    4 returned 2
branch  5 taken 1
branch  6 taken 1 (fallthrough)
        1:   30:        std::ifstream fStream(file);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   31:        std::string fData;
        1:   31-block  0
call    0 returned 1
        -:   32:
        1:   33:        if (!fStream.good()){
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   33-block  0
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    #####:   34:            std::cerr << "ERR: " << "File not found!" << std::endl;
    %%%%%:   34-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:   34-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:   34-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####:   35:            std::exit(ERROR_FILE_NOT_FOUND);
    %%%%%:   35-block  0
call    0 never executed
        -:   36:        }
        -:   37:
       98:   38:        while (getline(fStream, fData)) {
        1:   38-block  0
       98:   38-block  1
call    0 returned 98
branch  1 taken 98 (fallthrough)
branch  2 taken 0 (throw)
       98:   38-block  2
call    3 returned 98
branch  4 taken 98 (fallthrough)
branch  5 taken 0 (throw)
       98:   38-block  3
branch  6 taken 97
branch  7 taken 1 (fallthrough)
       97:   39:            m_code.push_back(fData);
       97:   39-block  0
call    0 returned 97
branch  1 taken 97 (fallthrough)
branch  2 taken 0 (throw)
        -:   40:        }
        1:   41:    }
        1:   41-block  0
call    0 returned 1
call    1 returned 1
    $$$$$:   41-block  1
call    2 never executed
    $$$$$:   41-block  2
call    3 never executed
        -:   42:
        1:   43:}
        1:   43-block  0
call    0 returned 1
call    1 returned 1
    $$$$$:   43-block  1
call    2 never executed
    $$$$$:   43-block  2
call    3 never executed
    $$$$$:   43-block  3
call    4 never executed
    $$$$$:   43-block  4
call    5 never executed
    $$$$$:   43-block  5
call    6 never executed
    $$$$$:   43-block  6
call    7 never executed
    $$$$$:   43-block  7
call    8 never executed
    $$$$$:   43-block  8
call    9 never executed
    $$$$$:   43-block  9
call   10 never executed
        -:   44:
function _ZN13JackTokenizer8to_lowerERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####:   45:void JackTokenizer::to_lower(std::string &str) {
function _ZZN13JackTokenizer8to_lowerERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEENKUlhE_clEh called 0 returned 0% blocks executed 0%
    #####:   46:    std::transform(str.begin(), str.end(), str.begin(), [](unsigned char c) { return std::tolower(c); });
    %%%%%:   46-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    %%%%%:   46-block  1
    #####:   47:}
        -:   48:
function _ZN13JackTokenizer9printCodeEv called 0 returned 0% blocks executed 0%
    #####:   49:void JackTokenizer::printCode() {
    #####:   50:    for (const auto& token: this->m_code){
    %%%%%:   50-block  0
call    0 never executed
call    1 never executed
    %%%%%:   50-block  1
call    2 never executed
    %%%%%:   50-block  2
call    3 never executed
    %%%%%:   50-block  3
call    4 never executed
branch  5 never executed
branch  6 never executed
    #####:   51:        std::cout << token << std::endl;
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:   51-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
        -:   52:    }
    #####:   53:}
    %%%%%:   53-block  0
        -:   54:
function _ZN13JackTokenizer9cleanCodeEv called 1 returned 100% blocks executed 74%
        1:   55:void JackTokenizer::cleanCode() {
        1:   56:    CODE tokens;
        1:   56-block  0
call    0 returned 1
        1:   57:    std::string tok;
call    0 returned 1
        -:   58:
       98:   59:    for (const auto& token: this->m_code){
call    0 returned 1
call    1 returned 1
       97:   59-block  0
call    2 returned 97
       97:   59-block  1
call    3 returned 97
       98:   59-block  2
call    4 returned 98
branch  5 taken 97
branch  6 taken 1 (fallthrough)
       97:   60:        if (token.starts_with("/") || token.empty()) {continue;}
call    0 returned 97
branch  1 taken 92 (fallthrough)
branch  2 taken 5
       92:   60-block  0
call    3 returned 92
branch  4 taken 12 (fallthrough)
branch  5 taken 80
       17:   60-block  1
       80:   60-block  2
       97:   60-block  3
branch  6 taken 17 (fallthrough)
branch  7 taken 80
       17:   60-block  4
       80:   61:        auto slash_idx = token.find("/");
       80:   61-block  0
call    0 returned 80
        -:   62:
       80:   63:        if (slash_idx != std::string::npos){
branch  0 taken 0 (fallthrough)
branch  1 taken 80
    #####:   64:            tok = token.substr(0, slash_idx);
    %%%%%:   64-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:   64-block  1
call    3 never executed
call    4 never executed
        -:   65:        }
        -:   66:        else{
       80:   67:            tok = token;
       80:   67-block  0
call    0 returned 80
branch  1 taken 80 (fallthrough)
branch  2 taken 0 (throw)
        -:   68:        }
       80:   69:        tokens.push_back(tok);
       80:   69-block  0
call    0 returned 80
branch  1 taken 80 (fallthrough)
branch  2 taken 0 (throw)
        -:   70:    }
        1:   71:    this->m_code = tokens;
        1:   71-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   72:}
        1:   72-block  0
call    0 returned 1
call    1 returned 1
    $$$$$:   72-block  1
call    2 never executed
    $$$$$:   72-block  2
call    3 never executed
        -:   73:
function _ZN13JackTokenizer12tokenizeCodeEv called 1 returned 100% blocks executed 78%
        1:   74:void JackTokenizer::tokenizeCode() {
        1:   75:    CODE tokens;
        1:   75-block  0
call    0 returned 1
        1:   76:    CODE temp_tokens;
call    0 returned 1
        -:   77:
        1:   78:    std::string lexiconType;
call    0 returned 1
        1:   79:    std::string xmlElement;
call    0 returned 1
        1:   80:    std::string str;
call    0 returned 1
        -:   81:
        1:   82:    pugi::xml_document xmlDoc;
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   83:    node class_node;
        1:   83-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   84:    node classVarNode;
        1:   84-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   85:    int counter = 0;
        1:   86:    node subroutineNode;
        1:   86-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   87:    node subroutineTypeNode;
        1:   87-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   88:    node parameterNode;
        1:   88-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   89:    node subroutineBodyNode;
        1:   89-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   90:    node subroutineStatementsNode;
        1:   90-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   91:    node subroutineVarNode;
        1:   91-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   92:    node varExpressionNode;
        1:   92-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   93:    node varTermNode;
        1:   93-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -:   94:
       81:   95:    for (auto &code: m_code) {
        1:   95-block  0
call    0 returned 1
call    1 returned 1
       80:   95-block  1
call    2 returned 80
call    3 returned 80
       81:   95-block  2
call    4 returned 81
branch  5 taken 80
branch  6 taken 1 (fallthrough)
        -:   96:
       80:   97:        node typeNode;
call    0 returned 80
branch  1 taken 80 (fallthrough)
branch  2 taken 0 (throw)
       80:   98:        auto tokenNoSpace = std::find_if_not(code.rbegin(), code.rend(), ::isspace).base();
       80:   98-block  0
call    0 returned 80
call    1 returned 80
call    2 returned 80
branch  3 taken 80 (fallthrough)
branch  4 taken 0 (throw)
       80:   98-block  1
call    5 returned 80
    $$$$$:   98-block  2
    $$$$$:   98-block  3
       80:   99:        std::string token(code.begin(), tokenNoSpace);
call    0 returned 80
call    1 returned 80
call    2 returned 80
branch  3 taken 80 (fallthrough)
branch  4 taken 0 (throw)
    $$$$$:   99-block  0
       80:  100:        auto tokenNoSpace2 = std::find_if_not(token.begin(), token.end(), ::isspace).base();
call    0 returned 80
call    1 returned 80
call    2 returned 80
branch  3 taken 80 (fallthrough)
branch  4 taken 0 (throw)
       80:  100-block  0
call    5 returned 80
       80:  101:        token = tokenNoSpace2;
call    0 returned 80
branch  1 taken 80 (fallthrough)
branch  2 taken 0 (throw)
        -:  102:
       80:  103:        if (isNotEmpty(token)){
       80:  103-block  0
call    0 returned 80
branch  1 taken 80 (fallthrough)
branch  2 taken 0 (throw)
       80:  103-block  1
branch  3 taken 80 (fallthrough)
branch  4 taken 0
       80:  104:            temp_tokens = getCodeVector(token);
       80:  104-block  0
call    0 returned 80
branch  1 taken 80 (fallthrough)
branch  2 taken 0 (throw)
       80:  104-block  1
call    3 returned 80
branch  4 taken 80 (fallthrough)
branch  5 taken 0 (throw)
       80:  104-block  2
call    6 returned 80
call    7 returned 80
call    8 returned 80
    $$$$$:  104-block  3
call    9 never executed
    $$$$$:  104-block  4
        -:  105:
      473:  106:            for (auto &item: temp_tokens){
call    0 returned 80
call    1 returned 80
      393:  106-block  0
call    2 returned 393
      393:  106-block  1
call    3 returned 393
      473:  106-block  2
call    4 returned 473
branch  5 taken 393
branch  6 taken 80 (fallthrough)
      393:  107:                if (isValid(validKeywords, item) || isValid(validSymbols, item)){
call    0 returned 393
branch  1 taken 393 (fallthrough)
branch  2 taken 0 (throw)
      393:  107-block  0
branch  3 taken 317 (fallthrough)
branch  4 taken 76
      317:  107-block  1
call    5 returned 317
branch  6 taken 317 (fallthrough)
branch  7 taken 0 (throw)
      317:  107-block  2
branch  8 taken 222 (fallthrough)
branch  9 taken 95
      298:  107-block  3
       95:  107-block  4
      393:  107-block  5
branch 10 taken 298 (fallthrough)
branch 11 taken 95
        -:  108:
      298:  109:                    if (item == "class"){
      298:  109-block  0
call    0 returned 298
branch  1 taken 1 (fallthrough)
branch  2 taken 297
        1:  110:                        class_node = xmlDoc.append_child("class");
        1:  110-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  111:                        codeInfo.classDec = true;
        1:  111-block  0
        -:  112:                    }
        -:  113:
      298:  114:                    if (isValid(validSubroutineDec, item)){
      298:  114-block  0
call    0 returned 298
branch  1 taken 298 (fallthrough)
branch  2 taken 0 (throw)
      298:  114-block  1
branch  3 taken 10 (fallthrough)
branch  4 taken 288
       10:  115:                        codeInfo.subroutineDec = true;
       10:  116:                        subroutineNode = class_node.append_child("subroutineDec");
       10:  116-block  0
call    0 returned 10
branch  1 taken 10 (fallthrough)
branch  2 taken 0 (throw)
        -:  117:                    }
        -:  118:
      298:  119:                    lexiconType = isValid(validKeywords, item) ? "keyword" : "symbol";
      298:  119-block  0
call    0 returned 298
branch  1 taken 298 (fallthrough)
branch  2 taken 0 (throw)
      298:  119-block  1
branch  3 taken 76 (fallthrough)
branch  4 taken 222
       76:  119-block  2
      222:  119-block  3
      298:  119-block  4
call    5 returned 298
branch  6 taken 298 (fallthrough)
branch  7 taken 0 (throw)
        -:  120:
      298:  121:                    if (isValid(validVarDecs, item)){
      298:  121-block  0
call    0 returned 298
branch  1 taken 298 (fallthrough)
branch  2 taken 0 (throw)
      298:  121-block  1
branch  3 taken 10 (fallthrough)
branch  4 taken 288
       10:  122:                        if (codeInfo.subroutineBodyBegin){
       10:  122-block  0
branch  0 taken 9 (fallthrough)
branch  1 taken 1
        9:  123:                            codeInfo.subroutineVarDec = true;
        9:  123-block  0
        -:  124:                        }
        -:  125:                        else{
        1:  126:                            codeInfo.varDec = true;
        1:  126-block  0
        -:  127:                        }
        -:  128:                    }
        -:  129:
      298:  130:                    if (codeInfo.classDec && (item == "{") && !(codeInfo.codeSwitch) && !(codeInfo.subroutineDec)){
      298:  130-block  0
branch  0 taken 298 (fallthrough)
branch  1 taken 0
      298:  130-block  1
call    2 returned 298
branch  3 taken 8 (fallthrough)
branch  4 taken 290
        8:  130-block  2
branch  5 taken 8 (fallthrough)
branch  6 taken 0
        8:  130-block  3
branch  7 taken 7 (fallthrough)
branch  8 taken 1
        7:  130-block  4
      291:  130-block  5
      298:  130-block  6
branch  9 taken 7 (fallthrough)
branch 10 taken 291
        7:  131:                        codeInfo.classDecBegin = true;
        7:  131-block  0
        -:  132:                    }
        -:  133:
      298:  134:                    if (!(codeInfo.varDec) && (codeInfo.classVarDec)){
      298:  134-block  0
branch  0 taken 293 (fallthrough)
branch  1 taken 5
      293:  134-block  1
branch  2 taken 1 (fallthrough)
branch  3 taken 292
        1:  135:                        codeInfo.classVarDec = false;
        1:  135-block  0
        -:  136:                    }
        -:  137:
      298:  138:                    if ((codeInfo.subroutineVarDec) && !(codeInfo.varExpression)){
      298:  138-block  0
branch  0 taken 27 (fallthrough)
branch  1 taken 271
       27:  138-block  1
branch  2 taken 18 (fallthrough)
branch  3 taken 9
       18:  139:                        if (isValid(validVarDecs, item)){
       18:  139-block  0
call    0 returned 18
branch  1 taken 18 (fallthrough)
branch  2 taken 0 (throw)
       18:  139-block  1
branch  3 taken 9 (fallthrough)
branch  4 taken 9
        9:  140:                           if (item=="let"){
        9:  140-block  0
call    0 returned 9
branch  1 taken 9 (fallthrough)
branch  2 taken 0
        9:  141:                               subroutineVarNode = subroutineStatementsNode.append_child("letStatement");
        9:  141-block  0
call    0 returned 9
branch  1 taken 9 (fallthrough)
branch  2 taken 0 (throw)
        -:  142:                           }
        -:  143:                       }
        -:  144:
       18:  145:                       if (item == ";"){
       18:  145-block  0
call    0 returned 18
branch  1 taken 0 (fallthrough)
branch  2 taken 18
    #####:  146:                           codeInfo.subroutineVarDec = false;
    #####:  147:                           codeInfo.varExpression = false;
    %%%%%:  147-block  0
        -:  148:                       }
        -:  149:
       18:  150:                       subroutineVarNode.append_child(lexiconType.c_str()).text().set(item.c_str());
       18:  150-block  0
call    0 returned 18
call    1 returned 18
branch  2 taken 18 (fallthrough)
branch  3 taken 0 (throw)
       18:  150-block  1
call    4 returned 18
branch  5 taken 18 (fallthrough)
branch  6 taken 0 (throw)
       18:  150-block  2
call    7 returned 18
call    8 returned 18
branch  9 taken 18 (fallthrough)
branch 10 taken 0 (throw)
    $$$$$:  150-block  3
    $$$$$:  150-block  4
       18:  151:                       if (item == "="){
       18:  151-block  0
call    0 returned 18
branch  1 taken 9 (fallthrough)
branch  2 taken 9
        9:  152:                            varExpressionNode = subroutineVarNode.append_child("expression");
        9:  152-block  0
call    0 returned 9
branch  1 taken 9 (fallthrough)
branch  2 taken 0 (throw)
        9:  153:                            codeInfo.varExpression = true;
        9:  154:                            codeInfo.varTerm = true;
        9:  154-block  0
        -:  155:                        }
       30:  156:                       continue;
       18:  156-block  0
       30:  156-block  1
        -:  157:                    }
        -:  158:
      280:  159:                    if (codeInfo.varExpression){
      280:  159-block  0
branch  0 taken 9 (fallthrough)
branch  1 taken 271
        9:  160:                        if (item == ";"){
        9:  160-block  0
call    0 returned 9
branch  1 taken 9 (fallthrough)
branch  2 taken 0
        9:  161:                            codeInfo.varExpression = false;
        9:  162:                            codeInfo.varTerm = false;
        9:  163:                            subroutineVarNode.append_child(lexiconType.c_str()).text().set(item.c_str());
        9:  163-block  0
call    0 returned 9
call    1 returned 9
branch  2 taken 9 (fallthrough)
branch  3 taken 0 (throw)
        9:  163-block  1
call    4 returned 9
branch  5 taken 9 (fallthrough)
branch  6 taken 0 (throw)
        9:  163-block  2
call    7 returned 9
call    8 returned 9
branch  9 taken 9 (fallthrough)
branch 10 taken 0 (throw)
    $$$$$:  163-block  3
    $$$$$:  163-block  4
        9:  164:                            continue;
        9:  164-block  0
        -:  165:                        }
    #####:  166:                        varTermNode = varExpressionNode.append_child("term");
    %%%%%:  166-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  167://                            varTermNode.append_child(lexiconType.c_str()).text().set(item.c_str());
        -:  168://                            varExpressionNode.append_child(lexiconType.c_str()).text().set(item.c_str());
        -:  169://                        }
    #####:  170:                        codeInfo.varTerm = true;
    %%%%%:  170-block  0
        -:  171:                    }
        -:  172:
      271:  173:                    std::string temp = "classVarDec" + std::to_string(counter);
      271:  173-block  0
call    0 returned 271
branch  1 taken 271 (fallthrough)
branch  2 taken 0 (throw)
      271:  173-block  1
call    3 returned 271
branch  4 taken 271 (fallthrough)
branch  5 taken 0 (throw)
    $$$$$:  173-block  2
        -:  174:
      271:  175:                    if (codeInfo.classVarDec && codeInfo.varDecEnd){
branch  0 taken 4 (fallthrough)
branch  1 taken 267
        4:  175-block  0
branch  2 taken 0 (fallthrough)
branch  3 taken 4
    #####:  176:                        codeInfo.varDecEnd = false;
    #####:  177:                        codeInfo.codeSwitch = true;
        -:  178:
    #####:  179:                        if (codeInfo.classDecBegin && codeInfo.varDec){
    %%%%%:  179-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  179-block  1
branch  2 never executed
branch  3 never executed
    #####:  180:                            codeInfo.classVarDec = true;
    #####:  181:                            codeInfo.classDecBegin = false;
    %%%%%:  181-block  0
        -:  182:                        }
        -:  183:
    #####:  184:                        classVarNode = class_node.append_child(temp.c_str());
    %%%%%:  184-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  185:                        counter++;
    %%%%%:  185-block  0
        -:  186:                    }
      271:  187:                    else if (codeInfo.classDec && codeInfo.classDecBegin && codeInfo.varDec){
      271:  187-block  0
branch  0 taken 271 (fallthrough)
branch  1 taken 0
      271:  187-block  1
branch  2 taken 191 (fallthrough)
branch  3 taken 80
      191:  187-block  2
branch  4 taken 1 (fallthrough)
branch  5 taken 190
        1:  188:                        classVarNode = class_node.append_child(temp.c_str());
        1:  188-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:  189:                        codeInfo.classVarDec = true;
        1:  190:                        codeInfo.classDecBegin = false;
        1:  191:                        counter++;
        1:  191-block  0
        -:  192:                    }
        -:  193:
      271:  194:                    if (codeInfo.classDec && (item == "{") && !(codeInfo.codeSwitch) && !(codeInfo.subroutineDec)){
      271:  194-block  0
branch  0 taken 271 (fallthrough)
branch  1 taken 0
      271:  194-block  1
call    2 returned 271
branch  3 taken 8 (fallthrough)
branch  4 taken 263
        8:  194-block  2
branch  5 taken 8 (fallthrough)
branch  6 taken 0
        8:  194-block  3
branch  7 taken 7 (fallthrough)
branch  8 taken 1
        7:  194-block  4
      264:  194-block  5
      271:  194-block  6
branch  9 taken 7 (fallthrough)
branch 10 taken 264
        7:  195:                        codeInfo.classDecBegin = true;
        7:  195-block  0
        -:  196:                    }
        -:  197:
      271:  198:                    if ((codeInfo.classVarDec) && !(codeInfo.subroutineBodyBegin)){
      271:  198-block  0
branch  0 taken 5 (fallthrough)
branch  1 taken 266
        5:  198-block  1
branch  2 taken 5 (fallthrough)
branch  3 taken 0
        5:  199:                        node childNode = classVarNode.append_child(lexiconType.c_str());
        5:  199-block  0
call    0 returned 5
call    1 returned 5
branch  2 taken 5 (fallthrough)
branch  3 taken 0 (throw)
        5:  200:                        childNode.append_child(pugi::node_pcdata).set_value(item.c_str());
        5:  200-block  0
call    0 returned 5
branch  1 taken 5 (fallthrough)
branch  2 taken 0 (throw)
        5:  200-block  1
call    3 returned 5
call    4 returned 5
branch  5 taken 5 (fallthrough)
branch  6 taken 0 (throw)
    $$$$$:  200-block  2
        5:  201:                    }
        5:  201-block  0
      266:  202:                    else if ((codeInfo.subroutineDec)){
      266:  202-block  0
branch  0 taken 45 (fallthrough)
branch  1 taken 221
       45:  203:                        subroutineTypeNode = subroutineNode.append_child(lexiconType.c_str());
       45:  203-block  0
call    0 returned 45
call    1 returned 45
branch  2 taken 45 (fallthrough)
branch  3 taken 0 (throw)
       45:  204:                        auto it = std::find(temp_tokens.begin(), temp_tokens.end(), "(");
       45:  204-block  0
call    0 returned 45
call    1 returned 45
call    2 returned 45
branch  3 taken 45 (fallthrough)
branch  4 taken 0 (throw)
        -:  205:
       45:  206:                        if (it != temp_tokens.end()) {
       45:  206-block  0
call    0 returned 45
call    1 returned 45
branch  2 taken 45 (fallthrough)
branch  3 taken 0
       45:  207:                            auto index = std::distance(temp_tokens.begin(), it);
       45:  207-block  0
call    0 returned 45
call    1 returned 45
branch  2 taken 45 (fallthrough)
branch  3 taken 0 (throw)
       45:  208:                            auto it2 = std::find(temp_tokens.begin(), temp_tokens.end(), ")");
       45:  208-block  0
call    0 returned 45
call    1 returned 45
call    2 returned 45
branch  3 taken 45 (fallthrough)
branch  4 taken 0 (throw)
       45:  209:                            auto index2 = std::distance(temp_tokens.begin(), it2);
       45:  209-block  0
call    0 returned 45
call    1 returned 45
branch  2 taken 45 (fallthrough)
branch  3 taken 0 (throw)
        -:  210:
       45:  211:                            if ((index+1) != index2){
       45:  211-block  0
branch  0 taken 9 (fallthrough)
branch  1 taken 36
        9:  212:                                if (item == "("){
        9:  212-block  0
call    0 returned 9
branch  1 taken 1 (fallthrough)
branch  2 taken 8
        1:  213:                                    subroutineTypeNode.append_child(pugi::node_pcdata).set_value(item.c_str());
        1:  213-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  213-block  1
call    3 returned 1
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
    $$$$$:  213-block  2
        1:  214:                                    parameterNode = subroutineNode.append_child("parameterList");
        1:  214-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  215:                                    codeInfo.parameterDec = true;
        2:  216:                                    continue;
        1:  216-block  0
        2:  216-block  1
        -:  217:                                }
        8:  218:                                else if ((item == ")") && (codeInfo.parameterDec)){
        8:  218-block  0
call    0 returned 8
branch  1 taken 1 (fallthrough)
branch  2 taken 7
        1:  218-block  1
branch  3 taken 1 (fallthrough)
branch  4 taken 0
        1:  218-block  2
        7:  218-block  3
        8:  218-block  4
branch  5 taken 1 (fallthrough)
branch  6 taken 7
        1:  219:                                    node closingChild = subroutineNode.insert_child_after("symbol", parameterNode);
        1:  219-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  220:                                    closingChild.append_child(pugi::node_pcdata).set_value(item.c_str());
        1:  220-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  220-block  1
call    3 returned 1
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
    $$$$$:  220-block  2
        1:  221:                                    continue;
        1:  222:                                }
        1:  222-block  0
        -:  223:                            }
        -:  224:                        }
        -:  225:
       43:  226:                        if (codeInfo.parameterDec){
       43:  226-block  0
branch  0 taken 6 (fallthrough)
branch  1 taken 37
        6:  227:                            if (item == "{"){
        6:  227-block  0
call    0 returned 6
branch  1 taken 1 (fallthrough)
branch  2 taken 5
        1:  228:                                codeInfo.parameterDec = false;
        1:  229:                                codeInfo.subroutineBodyBegin = true;
        1:  230:                                subroutineBodyNode = subroutineNode.append_child("subroutineBody");
        1:  230-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  231:                                subroutineBodyNode.append_child(lexiconType.c_str()).text().set(item.c_str());
        1:  231-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:  231-block  1
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
        1:  231-block  2
call    7 returned 1
call    8 returned 1
branch  9 taken 1 (fallthrough)
branch 10 taken 0 (throw)
    $$$$$:  231-block  3
    $$$$$:  231-block  4
        1:  232:                                subroutineStatementsNode = subroutineBodyNode.append_child("statements");
        1:  232-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  233:                                continue;
        1:  233-block  0
        -:  234:                            }
        -:  235:                            else{
        5:  236:                                parameterNode.append_child(lexiconType.c_str()).text().set(item.c_str());
        5:  236-block  0
call    0 returned 5
call    1 returned 5
branch  2 taken 5 (fallthrough)
branch  3 taken 0 (throw)
        5:  236-block  1
call    4 returned 5
branch  5 taken 5 (fallthrough)
branch  6 taken 0 (throw)
        5:  236-block  2
call    7 returned 5
call    8 returned 5
branch  9 taken 5 (fallthrough)
branch 10 taken 0 (throw)
        5:  236-block  3
    $$$$$:  236-block  4
    $$$$$:  236-block  5
        -:  237:                            }
        -:  238:
        -:  239:                        }
       37:  240:                        else if (codeInfo.subroutineBodyBegin){
       37:  240-block  0
branch  0 taken 36 (fallthrough)
branch  1 taken 1
       36:  241:                                subroutineStatementsNode.append_child(lexiconType.c_str()).text().set(item.c_str());
       36:  241-block  0
call    0 returned 36
call    1 returned 36
branch  2 taken 36 (fallthrough)
branch  3 taken 0 (throw)
       36:  241-block  1
call    4 returned 36
branch  5 taken 36 (fallthrough)
branch  6 taken 0 (throw)
       36:  241-block  2
call    7 returned 36
call    8 returned 36
branch  9 taken 36 (fallthrough)
branch 10 taken 0 (throw)
       36:  241-block  3
    $$$$$:  241-block  4
    $$$$$:  241-block  5
        -:  242:                        }
        -:  243:                        else{
        1:  244:                            subroutineTypeNode.append_child(pugi::node_pcdata).set_value(item.c_str());
        1:  244-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  244-block  1
call    3 returned 1
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
        1:  244-block  2
    $$$$$:  244-block  3
        -:  245:                        }
        -:  246:                    }
        -:  247:                    else{
      221:  248:                        typeNode = class_node.append_child(lexiconType.c_str());
      221:  248-block  0
call    0 returned 221
call    1 returned 221
branch  2 taken 221 (fallthrough)
branch  3 taken 0 (throw)
      221:  249:                        typeNode.append_child(pugi::node_pcdata).set_value(item.c_str());
      221:  249-block  0
call    0 returned 221
branch  1 taken 221 (fallthrough)
branch  2 taken 0 (throw)
      221:  249-block  1
call    3 returned 221
call    4 returned 221
branch  5 taken 221 (fallthrough)
branch  6 taken 0 (throw)
      221:  249-block  2
    $$$$$:  249-block  3
        -:  250:                    }
      271:  251:                }
      268:  251-block  0
      271:  251-block  1
call    0 returned 271
branch  1 taken 268 (fallthrough)
branch  2 taken 3
    $$$$$:  251-block  2
call    3 never executed
        -:  252:                else{
       95:  253:                    lexiconType = "identifier";
       95:  253-block  0
call    0 returned 95
branch  1 taken 95 (fallthrough)
branch  2 taken 0 (throw)
       95:  254:                    if (isNotEmpty(item)) {
       95:  254-block  0
call    0 returned 95
branch  1 taken 95 (fallthrough)
branch  2 taken 0 (throw)
       95:  254-block  1
branch  3 taken 89 (fallthrough)
branch  4 taken 6
       89:  255:                        if (codeInfo.classVarDec){
       89:  255-block  0
branch  0 taken 3 (fallthrough)
branch  1 taken 86
        3:  256:                            node childNode = classVarNode.append_child(lexiconType.c_str());
        3:  256-block  0
call    0 returned 3
call    1 returned 3
branch  2 taken 3 (fallthrough)
branch  3 taken 0 (throw)
        3:  257:                            childNode.append_child(pugi::node_pcdata).set_value(item.c_str());
        3:  257-block  0
call    0 returned 3
branch  1 taken 3 (fallthrough)
branch  2 taken 0 (throw)
        3:  257-block  1
call    3 returned 3
call    4 returned 3
branch  5 taken 3 (fallthrough)
branch  6 taken 0 (throw)
        3:  257-block  2
    $$$$$:  257-block  3
        -:  258:                        }
       86:  259:                        else if (codeInfo.subroutineDec){
       86:  259-block  0
branch  0 taken 14 (fallthrough)
branch  1 taken 72
       14:  260:                            if (codeInfo.parameterDec){
       14:  260-block  0
branch  0 taken 3 (fallthrough)
branch  1 taken 11
        3:  261:                                subroutineTypeNode = parameterNode.append_child(lexiconType.c_str());
        3:  261-block  0
call    0 returned 3
call    1 returned 3
branch  2 taken 3 (fallthrough)
branch  3 taken 0 (throw)
        3:  262:                                subroutineTypeNode.append_child(pugi::node_pcdata).set_value(item.c_str());
        3:  262-block  0
call    0 returned 3
branch  1 taken 3 (fallthrough)
branch  2 taken 0 (throw)
        3:  262-block  1
call    3 returned 3
call    4 returned 3
branch  5 taken 3 (fallthrough)
branch  6 taken 0 (throw)
        3:  262-block  2
    $$$$$:  262-block  3
        -:  263:                            }
        -:  264:                            else{
       11:  265:                                node childNode = subroutineNode.append_child(lexiconType.c_str());
       11:  265-block  0
call    0 returned 11
call    1 returned 11
branch  2 taken 11 (fallthrough)
branch  3 taken 0 (throw)
       11:  266:                                childNode.append_child(pugi::node_pcdata).set_value(item.c_str());
       11:  266-block  0
call    0 returned 11
branch  1 taken 11 (fallthrough)
branch  2 taken 0 (throw)
       11:  266-block  1
call    3 returned 11
call    4 returned 11
branch  5 taken 11 (fallthrough)
branch  6 taken 0 (throw)
       11:  266-block  2
    $$$$$:  266-block  3
        -:  267:                            }
        -:  268:                        }
       72:  269:                        else if (codeInfo.subroutineVarDec){
       72:  269-block  0
branch  0 taken 18 (fallthrough)
branch  1 taken 54
       18:  270:                            if (codeInfo.varExpression){
       18:  270-block  0
branch  0 taken 9 (fallthrough)
branch  1 taken 9
        9:  271:                                if (codeInfo.varTerm){
        9:  271-block  0
branch  0 taken 9 (fallthrough)
branch  1 taken 0
        9:  272:                                    varTermNode.append_child(lexiconType.c_str()).text().set(item.c_str());
        9:  272-block  0
call    0 returned 9
call    1 returned 9
branch  2 taken 9 (fallthrough)
branch  3 taken 0 (throw)
        9:  272-block  1
call    4 returned 9
branch  5 taken 9 (fallthrough)
branch  6 taken 0 (throw)
        9:  272-block  2
call    7 returned 9
call    8 returned 9
branch  9 taken 9 (fallthrough)
branch 10 taken 0 (throw)
        9:  272-block  3
    $$$$$:  272-block  4
    $$$$$:  272-block  5
        -:  273:                                }
        -:  274:                                else{
    #####:  275:                                    varExpressionNode.append_child(lexiconType.c_str()).text().set(item.c_str());
    %%%%%:  275-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:  275-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:  275-block  2
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%:  275-block  3
    $$$$$:  275-block  4
    $$$$$:  275-block  5
        -:  276:                                }
        -:  277:                            }
        -:  278:                            else{
        9:  279:                                subroutineVarNode.append_child(lexiconType.c_str()).text().set(item.c_str());
        9:  279-block  0
call    0 returned 9
call    1 returned 9
branch  2 taken 9 (fallthrough)
branch  3 taken 0 (throw)
        9:  279-block  1
call    4 returned 9
branch  5 taken 9 (fallthrough)
branch  6 taken 0 (throw)
        9:  279-block  2
call    7 returned 9
call    8 returned 9
branch  9 taken 9 (fallthrough)
branch 10 taken 0 (throw)
        9:  279-block  3
    $$$$$:  279-block  4
    $$$$$:  279-block  5
        -:  280:                            }
        -:  281:                        }
        -:  282:                        else{
       54:  283:                            node type_node = class_node.append_child(lexiconType.c_str());
       54:  283-block  0
call    0 returned 54
call    1 returned 54
branch  2 taken 54 (fallthrough)
branch  3 taken 0 (throw)
       54:  284:                            type_node.append_child(pugi::node_pcdata).set_value(item.c_str());
       54:  284-block  0
call    0 returned 54
branch  1 taken 54 (fallthrough)
branch  2 taken 0 (throw)
       54:  284-block  1
call    3 returned 54
call    4 returned 54
branch  5 taken 54 (fallthrough)
branch  6 taken 0 (throw)
       54:  284-block  2
    $$$$$:  284-block  3
        -:  285:                        }
        -:  286:                    }
        -:  287:                }
        -:  288:            }
       80:  289:            if (codeInfo.classVarDec && codeInfo.varDec){
       80:  289-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 79
        1:  289-block  1
branch  2 taken 1 (fallthrough)
branch  3 taken 0
        1:  290:                codeInfo.varDecEnd = true;
        1:  290-block  0
        -:  291:            }
       80:  292:            codeInfo.varDec = false;
       80:  293:            codeInfo.subroutineDec = false;
       80:  294:            codeInfo.parameterDec = false;
       80:  295:            codeInfo.subroutineVarDec = false;
       80:  296:            codeInfo.varExpression = false;
       80:  296-block  0
        -:  297:        }
       80:  298:    }
       80:  298-block  0
call    0 returned 80
    $$$$$:  298-block  1
call    1 never executed
        1:  299:    xmlDoc.save(std::cout);
        1:  299-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  300:}
        1:  300-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
call    3 returned 1
call    4 returned 1
call    5 returned 1
    $$$$$:  300-block  1
call    6 never executed
    $$$$$:  300-block  2
call    7 never executed
    $$$$$:  300-block  3
call    8 never executed
    $$$$$:  300-block  4
call    9 never executed
    $$$$$:  300-block  5
call   10 never executed
    $$$$$:  300-block  6
call   11 never executed
        -:  301:
function _ZN13JackTokenizer7isValidERKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS6_EERS6_ called 1622 returned 100% blocks executed 100%
     1622:  302:bool JackTokenizer::isValid(const CODE &vec, std::string &str) {
     1622:  303:    if (std::count(vec.begin(), vec.end(), str)){
     1622:  303-block  0
call    0 returned 1622
call    1 returned 1622
call    2 returned 1622
branch  3 taken 403 (fallthrough)
branch  4 taken 1219
      403:  304:        return true;
      403:  304-block  0
        -:  305:    }
     1219:  306:    return false;
     1219:  306-block  0
        -:  307:}
        -:  308:
function _ZN13JackTokenizer10isNotEmptyERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 309 returned 100% blocks executed 70%
      309:  309:bool JackTokenizer::isNotEmpty(std::string& str) {
      309:  310:    std::string temp = str;
      309:  310-block  0
call    0 returned 309
branch  1 taken 309 (fallthrough)
branch  2 taken 0 (throw)
      309:  311:    temp.erase(remove(temp.begin(), temp.end(), ' '), temp.end());
      309:  311-block  0
call    0 returned 309
call    1 returned 309
call    2 returned 309
call    3 returned 309
call    4 returned 309
branch  5 taken 309 (fallthrough)
branch  6 taken 0 (throw)
      309:  311-block  1
call    7 returned 309
call    8 returned 309
branch  9 taken 309 (fallthrough)
branch 10 taken 0 (throw)
    $$$$$:  311-block  2
    $$$$$:  311-block  3
    $$$$$:  311-block  4
    $$$$$:  311-block  5
    $$$$$:  311-block  6
        -:  312:
      309:  313:    if (!temp.empty()){
      309:  313-block  0
call    0 returned 309
branch  1 taken 303 (fallthrough)
branch  2 taken 6
      303:  314:        return true;
      303:  314-block  0
        -:  315:    }
        -:  316:
        6:  317:    return false;
        6:  317-block  0
      309:  318:}
      309:  318-block  0
call    0 returned 309
    $$$$$:  318-block  1
call    1 never executed
        -:  319:
function _ZN13JackTokenizer13getCodeVectorENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 80 returned 100% blocks executed 65%
       80:  320:CODE JackTokenizer::getCodeVector(std::string str) {
       80:  321:    CODE vec;
       80:  321-block  0
call    0 returned 80
       80:  322:    std::string item;
call    0 returned 80
       80:  323:    std::string temp2;
call    0 returned 80
       80:  324:    size_t idx = 0;
        -:  325:
      162:  326:    while (idx != std::string::npos) {
      162:  326-block  0
branch  0 taken 162
branch  1 taken 0 (fallthrough)
      162:  327:        idx = str.find(32);
      162:  327-block  0
call    0 returned 162
      162:  328:        item = str.substr(0, idx);
call    0 returned 162
branch  1 taken 162 (fallthrough)
branch  2 taken 0 (throw)
      162:  328-block  0
call    3 returned 162
call    4 returned 162
      162:  329:        item.erase(remove(item.begin(), item.end(), ' '), item.end());
call    0 returned 162
call    1 returned 162
call    2 returned 162
call    3 returned 162
call    4 returned 162
branch  5 taken 162 (fallthrough)
branch  6 taken 0 (throw)
      162:  329-block  0
call    7 returned 162
call    8 returned 162
branch  9 taken 162 (fallthrough)
branch 10 taken 0 (throw)
    $$$$$:  329-block  1
    $$$$$:  329-block  2
    $$$$$:  329-block  3
    $$$$$:  329-block  4
    $$$$$:  329-block  5
        -:  330:
      162:  331:        if ((item.find('(') != std::string::npos)){
      162:  331-block  0
call    0 returned 162
branch  1 taken 42 (fallthrough)
branch  2 taken 120
       42:  332:            idx = str.find('(');
       42:  332-block  0
call    0 returned 42
       42:  333:            auto idx2 = str.find(')');
call    0 returned 42
       42:  334:            if ((idx+1 != idx2)){
branch  0 taken 28 (fallthrough)
branch  1 taken 14
       28:  335:                parseFuncParams(str, vec);
       28:  335-block  0
call    0 returned 28
branch  1 taken 28 (fallthrough)
branch  2 taken 0 (throw)
       28:  336:                break;
       28:  336-block  0
        -:  337:            }
        -:  338:        }
        -:  339:
      134:  340:        if (item.find(',') != std::string::npos) {
      134:  340-block  0
call    0 returned 134
branch  1 taken 1 (fallthrough)
branch  2 taken 133
        1:  341:            item = str.substr(0, str.find_last_of(',')+1);
        1:  341-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:  341-block  1
call    4 returned 1
call    5 returned 1
        1:  342:            idx = str.find_last_of(',')+1;
call    0 returned 1
        -:  343:        }
        -:  344:
      134:  345:        if (isNotEmpty(item)) {
      134:  345-block  0
call    0 returned 134
branch  1 taken 134 (fallthrough)
branch  2 taken 0 (throw)
      134:  345-block  1
branch  3 taken 134 (fallthrough)
branch  4 taken 0
      134:  346:            if (item.find('.') != std::string::npos) {
      134:  346-block  0
call    0 returned 134
branch  1 taken 0 (fallthrough)
branch  2 taken 134
    #####:  347:                temp2 = item.substr(0, item.find('.'));
    %%%%%:  347-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:  347-block  1
call    4 never executed
call    5 never executed
    #####:  348:                vec.push_back(temp2);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  349:                vec.push_back(".");
    %%%%%:  349-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:  349-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:  349-block  2
call    7 never executed
call    8 never executed
    $$$$$:  349-block  3
call    9 never executed
    $$$$$:  349-block  4
    $$$$$:  349-block  5
call   10 never executed
    $$$$$:  349-block  6
    #####:  350:                item = item.substr(item.find('.') + 1);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:  350-block  0
call    4 never executed
call    5 never executed
        -:  351:            }
        -:  352:
      134:  353:            if (item.find(',') != std::string::npos) {
      134:  353-block  0
call    0 returned 134
branch  1 taken 1 (fallthrough)
branch  2 taken 133
        1:  354:                splitComma(item, vec);
        1:  354-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -:  355:            }
        -:  356:
      134:  357:            if (item.empty()){
      134:  357-block  0
call    0 returned 134
branch  1 taken 1 (fallthrough)
branch  2 taken 133
        1:  358:                item = str.substr(idx);
        1:  358-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  358-block  1
call    3 returned 1
call    4 returned 1
        1:  359:                item = item.substr(item.find_first_not_of(' '));
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:  359-block  0
call    4 returned 1
call    5 returned 1
        -:  360:            }
      134:  361:            item = addBrackets(item, vec);
      134:  361-block  0
call    0 returned 134
branch  1 taken 134 (fallthrough)
branch  2 taken 0 (throw)
      134:  361-block  1
call    3 returned 134
branch  4 taken 134 (fallthrough)
branch  5 taken 0 (throw)
      134:  361-block  2
call    6 returned 134
call    7 returned 134
call    8 returned 134
    $$$$$:  361-block  3
call    9 never executed
    $$$$$:  361-block  4
      134:  362:            if (addSemicolon(item, vec) == -1){ break; }
call    0 returned 134
branch  1 taken 134 (fallthrough)
branch  2 taken 0 (throw)
      134:  362-block  0
branch  3 taken 14 (fallthrough)
branch  4 taken 120
       14:  362-block  1
      120:  363:            addCurlyBrackets(item, vec);
      120:  363-block  0
call    0 returned 120
branch  1 taken 120 (fallthrough)
branch  2 taken 0 (throw)
      120:  364:            if (item.empty()){
      120:  364-block  0
call    0 returned 120
branch  1 taken 19 (fallthrough)
branch  2 taken 101
       19:  365:                break;
       19:  365-block  0
        -:  366:            }
      101:  367:            str = str.substr(idx + 1);
      101:  367-block  0
call    0 returned 101
branch  1 taken 101 (fallthrough)
branch  2 taken 0 (throw)
      101:  367-block  1
call    3 returned 101
call    4 returned 101
      101:  368:            if (idx >= str.length()) {
call    0 returned 101
branch  1 taken 19 (fallthrough)
branch  2 taken 82
       19:  369:                addSemicolon(str, vec);
       19:  369-block  0
call    0 returned 19
branch  1 taken 19 (fallthrough)
branch  2 taken 0 (throw)
       19:  370:                break;
       19:  370-block  0
        -:  371:            }
        -:  372:        }
        -:  373:        else{
    #####:  374:            str = str.substr(idx + 1);
    %%%%%:  374-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  374-block  1
call    3 never executed
call    4 never executed
        -:  375:        }
        -:  376:    }
      160:  377:    return vec;
       80:  377-block  0
       80:  377-block  1
       80:  378:}
       80:  378-block  0
call    0 returned 80
call    1 returned 80
    $$$$$:  378-block  1
call    2 never executed
    $$$$$:  378-block  2
call    3 never executed
    $$$$$:  378-block  3
call    4 never executed
        -:  379:
function _ZN13JackTokenizer10splitCommaERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERSt6vectorIS5_SaIS5_EE called 29 returned 100% blocks executed 66%
       29:  380:void JackTokenizer::splitComma(std::string& str, std::vector<std::string>& vec){
       29:  381:    CODE temp;
       29:  381-block  0
call    0 returned 29
       29:  382:    std::string str2 = str;
call    0 returned 29
branch  1 taken 29 (fallthrough)
branch  2 taken 0 (throw)
        -:  383:
       29:  384:    size_t idx = 0;
       29:  385:    std::string s2;
       29:  385-block  0
call    0 returned 29
        -:  386:
      101:  387:    while(idx!=std::string::npos){
      101:  387-block  0
branch  0 taken 72
branch  1 taken 29 (fallthrough)
       72:  388:        idx = str.find(' ');
       72:  388-block  0
call    0 returned 72
       72:  389:        if (idx == std::string::npos){
branch  0 taken 29 (fallthrough)
branch  1 taken 43
       29:  390:            temp.push_back(str);
       29:  390-block  0
call    0 returned 29
branch  1 taken 29 (fallthrough)
branch  2 taken 0 (throw)
        -:  391:        }
        -:  392:        else{
       43:  393:            s2 = str.substr(0, idx);
       43:  393-block  0
call    0 returned 43
branch  1 taken 43 (fallthrough)
branch  2 taken 0 (throw)
       43:  393-block  1
call    3 returned 43
call    4 returned 43
       43:  394:            temp.push_back(s2);
call    0 returned 43
branch  1 taken 43 (fallthrough)
branch  2 taken 0 (throw)
       43:  395:            str = str.substr(idx+1);
       43:  395-block  0
call    0 returned 43
branch  1 taken 43 (fallthrough)
branch  2 taken 0 (throw)
       43:  395-block  1
call    3 returned 43
call    4 returned 43
        -:  396:
        -:  397:        }
        -:  398:    }
        -:  399:
      101:  400:    for (const auto& k: temp){
       29:  400-block  0
call    0 returned 29
call    1 returned 29
       72:  400-block  1
call    2 returned 72
       72:  400-block  2
call    3 returned 72
      101:  400-block  3
call    4 returned 101
branch  5 taken 72
branch  6 taken 29 (fallthrough)
       72:  401:        auto idx2 = k.find(',');
call    0 returned 72
       72:  402:        if (idx2 != std::string::npos){
branch  0 taken 34 (fallthrough)
branch  1 taken 38
       34:  403:            s2 = k.substr(0, idx2);
       34:  403-block  0
call    0 returned 34
branch  1 taken 34 (fallthrough)
branch  2 taken 0 (throw)
       34:  403-block  1
call    3 returned 34
call    4 returned 34
       34:  404:            vec.push_back(s2);
call    0 returned 34
branch  1 taken 34 (fallthrough)
branch  2 taken 0 (throw)
       34:  405:            std::string s3(1, ',');
       34:  405-block  0
call    0 returned 34
call    1 returned 34
branch  2 taken 34 (fallthrough)
branch  3 taken 0 (throw)
    $$$$$:  405-block  1
       34:  406:            vec.push_back(s3);
call    0 returned 34
branch  1 taken 34 (fallthrough)
branch  2 taken 0 (throw)
       34:  407:            if (k.ends_with(',')){
       34:  407-block  0
call    0 returned 34
branch  1 taken 34 (fallthrough)
branch  2 taken 0
       34:  408:                str = "";
       34:  408-block  0
call    0 returned 34
branch  1 taken 34 (fallthrough)
branch  2 taken 0 (throw)
        -:  409:            }
       34:  410:        }
       34:  410-block  0
call    0 returned 34
    $$$$$:  410-block  1
call    1 never executed
        -:  411:        else{
       38:  412:            auto item = addBrackets(k, vec);
       38:  412-block  0
call    0 returned 38
branch  1 taken 38 (fallthrough)
branch  2 taken 0 (throw)
       38:  412-block  1
call    3 returned 38
branch  4 taken 38 (fallthrough)
branch  5 taken 0 (throw)
    $$$$$:  412-block  2
       38:  413:            int status = addSemicolon(item, vec);
call    0 returned 38
branch  1 taken 38 (fallthrough)
branch  2 taken 0 (throw)
       38:  414:            if (status==-1){
       38:  414-block  0
branch  0 taken 28 (fallthrough)
branch  1 taken 10
       28:  415:                str = "";
       28:  415-block  0
call    0 returned 28
branch  1 taken 28 (fallthrough)
branch  2 taken 0 (throw)
        -:  416:            }
        -:  417:            else{
      10*:  418:                if ((item.find(',') != std::string::npos) || (item.find(';') != std::string::npos)){
       10:  418-block  0
call    0 returned 10
branch  1 taken 10 (fallthrough)
branch  2 taken 0
       10:  418-block  1
call    3 returned 10
branch  4 taken 0 (fallthrough)
branch  5 taken 10
    %%%%%:  418-block  2
       10:  418-block  3
       10:  418-block  4
branch  6 taken 0 (fallthrough)
branch  7 taken 10
    #####:  419:                    idx2 = item.find(',');
    %%%%%:  419-block  0
call    0 never executed
    #####:  420:                    char to_find = idx2 == std::string::npos ? ';' : ',';
branch  0 never executed
branch  1 never executed
    %%%%%:  420-block  0
    %%%%%:  420-block  1
    #####:  421:                    str = str2.substr(item.find_last_of(to_find));
    %%%%%:  421-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:  421-block  1
call    4 never executed
call    5 never executed
        -:  422:                }
      10*:  423:                else if((item.find('(') != std::string::npos) || (item.find(')') != std::string::npos)){
       10:  423-block  0
call    0 returned 10
branch  1 taken 10 (fallthrough)
branch  2 taken 0
       10:  423-block  1
call    3 returned 10
branch  4 taken 0 (fallthrough)
branch  5 taken 10
    %%%%%:  423-block  2
       10:  423-block  3
       10:  423-block  4
branch  6 taken 0 (fallthrough)
branch  7 taken 10
    #####:  424:                    idx2 =  item.find('(');
    %%%%%:  424-block  0
call    0 never executed
    #####:  425:                    char to_find = idx2 == std::string::npos ? ')' : '(';
branch  0 never executed
branch  1 never executed
    %%%%%:  425-block  0
    %%%%%:  425-block  1
    #####:  426:                    str = str2.substr(item.find_last_of(to_find));
    %%%%%:  426-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:  426-block  1
call    4 never executed
call    5 never executed
        -:  427:                }
       10:  428:                else if ((item.find('{') != std::string::npos) || (item.find('}')) != std::string::npos){
       10:  428-block  0
call    0 returned 10
branch  1 taken 3 (fallthrough)
branch  2 taken 7
        3:  428-block  1
call    3 returned 3
branch  4 taken 0 (fallthrough)
branch  5 taken 3
        7:  428-block  2
        3:  428-block  3
       10:  428-block  4
branch  6 taken 7 (fallthrough)
branch  7 taken 3
        7:  429:                    idx2 = item.find('{');
        7:  429-block  0
call    0 returned 7
       7*:  430:                    char to_find = idx2 == std::string::npos ? '}' : '{';
branch  0 taken 0 (fallthrough)
branch  1 taken 7
    %%%%%:  430-block  0
        7:  430-block  1
        7:  431:                    str = str2.substr(item.find_last_of(to_find));
        7:  431-block  0
call    0 returned 7
call    1 returned 7
branch  2 taken 7 (fallthrough)
branch  3 taken 0 (throw)
        7:  431-block  1
call    4 returned 7
call    5 returned 7
        -:  432:                }
        -:  433:            }
       38:  434:       }
       38:  434-block  0
call    0 returned 38
    $$$$$:  434-block  1
call    1 never executed
        -:  435:   }
       29:  436:}
       29:  436-block  0
call    0 returned 29
call    1 returned 29
call    2 returned 29
    $$$$$:  436-block  1
call    3 never executed
    $$$$$:  436-block  2
call    4 never executed
    $$$$$:  436-block  3
call    5 never executed
        -:  437:
function _ZN13JackTokenizer11addBracketsENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERSt6vectorIS5_SaIS5_EE called 172 returned 100% blocks executed 77%
      172:  438:std::string JackTokenizer::addBrackets(std::string item, CODE &vec) {
      172:  439:    std::string temp2;
      172:  439-block  0
call    0 returned 172
        -:  440:
      172:  441:    if (item.find('(') != std::string::npos) {
call    0 returned 172
branch  1 taken 32 (fallthrough)
branch  2 taken 140
       32:  442:        temp2 = item.substr(0, item.find('('));
       32:  442-block  0
call    0 returned 32
call    1 returned 32
branch  2 taken 32 (fallthrough)
branch  3 taken 0 (throw)
       32:  442-block  1
call    4 returned 32
call    5 returned 32
       32:  443:        vec.push_back(temp2);
call    0 returned 32
branch  1 taken 32 (fallthrough)
branch  2 taken 0 (throw)
       32:  444:        vec.push_back("(");
       32:  444-block  0
call    0 returned 32
call    1 returned 32
branch  2 taken 32 (fallthrough)
branch  3 taken 0 (throw)
       32:  444-block  1
call    4 returned 32
branch  5 taken 32 (fallthrough)
branch  6 taken 0 (throw)
       32:  444-block  2
call    7 returned 32
call    8 returned 32
    $$$$$:  444-block  3
call    9 never executed
    $$$$$:  444-block  4
    $$$$$:  444-block  5
call   10 never executed
    $$$$$:  444-block  6
       32:  445:        item = item.substr(item.find('(') + 1);
call    0 returned 32
call    1 returned 32
branch  2 taken 32 (fallthrough)
branch  3 taken 0 (throw)
       32:  445-block  0
call    4 returned 32
call    5 returned 32
        -:  446:    }
        -:  447:
      172:  448:    if (item.find(')') != std::string::npos) {
      172:  448-block  0
call    0 returned 172
branch  1 taken 42 (fallthrough)
branch  2 taken 130
       42:  449:        if (item.ends_with(')') && !(item == ")")) {
       42:  449-block  0
call    0 returned 42
branch  1 taken 16 (fallthrough)
branch  2 taken 26
       16:  449-block  1
call    3 returned 16
branch  4 taken 7 (fallthrough)
branch  5 taken 9
        7:  449-block  2
       35:  449-block  3
       42:  449-block  4
branch  6 taken 7 (fallthrough)
branch  7 taken 35
        7:  450:            temp2 = item;
        7:  450-block  0
call    0 returned 7
branch  1 taken 7 (fallthrough)
branch  2 taken 0 (throw)
        7:  451:            temp2 = temp2.substr(0, temp2.length() - 1);
        7:  451-block  0
call    0 returned 7
call    1 returned 7
branch  2 taken 7 (fallthrough)
branch  3 taken 0 (throw)
        7:  451-block  1
call    4 returned 7
call    5 returned 7
        7:  452:            vec.push_back(temp2);
call    0 returned 7
branch  1 taken 7 (fallthrough)
branch  2 taken 0 (throw)
        -:  453:        }
       42:  454:        vec.push_back(")");
       42:  454-block  0
call    0 returned 42
call    1 returned 42
branch  2 taken 42 (fallthrough)
branch  3 taken 0 (throw)
       42:  454-block  1
call    4 returned 42
branch  5 taken 42 (fallthrough)
branch  6 taken 0 (throw)
       42:  454-block  2
call    7 returned 42
call    8 returned 42
    $$$$$:  454-block  3
call    9 never executed
    $$$$$:  454-block  4
    $$$$$:  454-block  5
call   10 never executed
    $$$$$:  454-block  6
       42:  455:        item = item.substr(item.find(')') + 1);
call    0 returned 42
call    1 returned 42
branch  2 taken 42 (fallthrough)
branch  3 taken 0 (throw)
       42:  455-block  0
call    4 returned 42
call    5 returned 42
        -:  456:    }
      344:  457:    return item;
      172:  457-block  0
call    0 returned 172
      172:  457-block  1
      172:  458:}
call    0 returned 172
    $$$$$:  458-block  0
call    1 never executed
        -:  459:
function _ZN13JackTokenizer12addSemicolonERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERSt6vectorIS5_SaIS5_EE called 191 returned 100% blocks executed 84%
      191:  460:int JackTokenizer::addSemicolon(std::string& item, CODE &vec) {
      191:  461:    std::string temp2;
      191:  461-block  0
call    0 returned 191
        -:  462:
      191:  463:    if (item.ends_with(';') && !(item == ";")) {
call    0 returned 191
branch  1 taken 46 (fallthrough)
branch  2 taken 145
       46:  463-block  0
call    3 returned 46
branch  4 taken 20 (fallthrough)
branch  5 taken 26
       20:  463-block  1
      171:  463-block  2
      191:  463-block  3
branch  6 taken 20 (fallthrough)
branch  7 taken 171
       20:  464:        temp2 = item;
       20:  464-block  0
call    0 returned 20
branch  1 taken 20 (fallthrough)
branch  2 taken 0 (throw)
       20:  465:        item = item.substr(0, item.find(';'));
       20:  465-block  0
call    0 returned 20
call    1 returned 20
branch  2 taken 20 (fallthrough)
branch  3 taken 0 (throw)
       20:  465-block  1
call    4 returned 20
call    5 returned 20
        -:  466:    }
        -:  467:
      191:  468:    if (item.empty()){
      191:  468-block  0
call    0 returned 191
branch  1 taken 16 (fallthrough)
branch  2 taken 175
       16:  469:        return -1;
       16:  469-block  0
        -:  470:    }
        -:  471:
      175:  472:    vec.push_back(item);
      175:  472-block  0
call    0 returned 175
branch  1 taken 175 (fallthrough)
branch  2 taken 0 (throw)
        -:  473:
      175:  474:    if (temp2.ends_with(';') && !(item == ";")) {
      175:  474-block  0
call    0 returned 175
branch  1 taken 20 (fallthrough)
branch  2 taken 155
       20:  474-block  1
call    3 returned 20
branch  4 taken 20 (fallthrough)
branch  5 taken 0
       20:  474-block  2
      155:  474-block  3
      175:  474-block  4
branch  6 taken 20 (fallthrough)
branch  7 taken 155
       20:  475:        vec.push_back(";");
       20:  475-block  0
call    0 returned 20
call    1 returned 20
branch  2 taken 20 (fallthrough)
branch  3 taken 0 (throw)
       20:  475-block  1
call    4 returned 20
branch  5 taken 20 (fallthrough)
branch  6 taken 0 (throw)
       20:  475-block  2
call    7 returned 20
call    8 returned 20
    $$$$$:  475-block  3
call    9 never executed
    $$$$$:  475-block  4
    $$$$$:  475-block  5
call   10 never executed
    $$$$$:  475-block  6
       20:  476:        auto idx = temp2.find(';');
call    0 returned 20
       20:  477:        item = item.substr(idx);
call    0 returned 20
branch  1 taken 20 (fallthrough)
branch  2 taken 0 (throw)
       20:  477-block  0
call    3 returned 20
call    4 returned 20
        -:  478:
       20:  479:        return 0;
        -:  480:    }
        -:  481:
      155:  482:    if (item == ";"){
      155:  482-block  0
call    0 returned 155
branch  1 taken 26 (fallthrough)
branch  2 taken 129
       26:  483:        return -1;
       26:  483-block  0
        -:  484:    }
        -:  485:
      129:  486:    return 0;
      129:  486-block  0
      191:  487:}
      191:  487-block  0
call    0 returned 191
    $$$$$:  487-block  1
call    1 never executed
        -:  488:
function _ZN13JackTokenizer16addCurlyBracketsERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERSt6vectorIS5_SaIS5_EE called 120 returned 100% blocks executed 100%
      120:  489:int JackTokenizer::addCurlyBrackets(std::string &item, CODE &vec) {
      120:  490:    if (item == "{" || item == "}") {
      120:  490-block  0
call    0 returned 120
branch  1 taken 120 (fallthrough)
branch  2 taken 0
      120:  490-block  1
call    3 returned 120
branch  4 taken 17 (fallthrough)
branch  5 taken 103
       17:  490-block  2
      103:  490-block  3
      120:  490-block  4
branch  6 taken 17 (fallthrough)
branch  7 taken 103
       17:  491:         vec.push_back(item);
       17:  491-block  0
call    0 returned 17
        -:  492:    }
      120:  493:    return 0;
      120:  493-block  0
        -:  494:}
        -:  495:
function _ZN13JackTokenizer15parseFuncParamsERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERSt6vectorIS5_SaIS5_EE called 28 returned 100% blocks executed 100%
       28:  496:int JackTokenizer::parseFuncParams(std::string &item, CODE &vec) {
       28:  497:    if (item.find('(') != std::string::npos) {
       28:  497-block  0
call    0 returned 28
branch  1 taken 28 (fallthrough)
branch  2 taken 0
       28:  498:        splitComma(item, vec);
       28:  498-block  0
call    0 returned 28
        -:  499:    }
       28:  500:    return 0;
       28:  500-block  0
        -:  501:}
